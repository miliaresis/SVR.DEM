--- SVR.DEM by G. Ch. Miliaresis 
             7th of January 2018

DESCRIPTION
    @author: gmiliar (George Ch. Miliaresis)
    Dimensonality reduction for DEMs (SVR.DEM) by G.Ch. Miliaresis
    Ver. 2017.02 winpython implementation, (https://winpython.github.io/)
    Details in https://github.com/miliaresis
               https://sites.google.com/site/miliaresisg/

CONTENTS:
 1. Processing options,  active data header ('dataDEM2') and data
 2. module: dmr_data_headers
 3. moduleL dmr_myf
 4. History file (test run)
 5. Convergence (classification after k-means clustering) 
_____________________________________________________________________
111111111111111111111111111111111111111111111111111111111111111111111
*********************************************************************
Processing options: 
  TIFF import options ['PIL', 'SKITimage'] 
  Clustering options ['Kmeans', 'Kmeans refined by NBG'] 

DISPLAY ACTIVE DATA HEADER
---> ALOS, SRTM, ASTER GDEMs, 1 arc sec, Lat/Lon, WGS84, EGM96
Labels for x-axis, y-axis of images/histograms:
         ['H, m', 'Longitude,DD', 'Latitude, DD']
Geographic extent of data:  [54.2362, 54.681, 27.1107, 27.5555]
AXES legends & Tables headers for rows  & columns 
    ['A', 'S', 'G'] 
    ['ALOS', 'SRTM', 'ASTER']
Domain of histograms, data:  301 2210  Rdata:  -25 25  m
Subdir with images or vector files=  data
Clustering method:  Kmeans refined by NBG
Method for TIF file import:  PIL
Data headers available:  ['dataDEM2']

IMPORT/READ DATA FILES
Files EXTENSION=  .tif DIR:  data 
FILENAMES:  ['MASK', '01', '02', '03']  (names are case sensitive)
data\MASK.tif (1601, 1601)
data\01.tif (1601, 1601)
data\02.tif (1601, 1601)
data\03.tif (1601, 1601)
_____________________________________________________________________
222222222222222222222222222222222222222222222222222222222222222222222
*********************************************************************
Help on module dmr_data_headers:

NAME
    dmr_data_headers - Created on  20th of December, 2017

    ----------------------------------------------------
    TO LOAD your data, define a header in the file svr_data_headers.py.
    ---------------------------------------------------------

FUNCTIONS
    dataDEM2(clustering_options, tiff_import_options)
        ALOS, SRTM, ASTER GDEMs
    
    phead(xy, ML, x2, x3, Lmn, Lmx, Rmn, Rmx, LDIR, T, cm)
        PRINT DATA HEADER.
         DATA files stored in a subdir named  data within the dir where the
         3 scripts are stored.
        The tif image filenames (in the data dir) are fixed :
          MASK [0, 1 for data], & 01, 02, 03 for the 3 DEMs (ALOS, SRTM, ASTER)
          THE NAMES ARE CASE SENSITIVE and they are
          determined automatically from the script (as well as the dimension of
          the feature space -> length of tics list), so you should preserve them
          in your data dir.

FILE
    d:\run_z\dmr_data_headers.py
_____________________________________________________________________
333333333333333333333333333333333333333333333333333333333333333333333
*********************************************************************
Help on module dmr_myf:

NAME
    dmr_myf - Created on  20th of December, 2017

FUNCTIONS
    CreateMask_fromCluster(c)
        Create mask matrix from cluster image matrix
    
    ImplementSVR_MG(data, Labelmonth1, f)
        main calls to SVR_MG
    
    Kmeans_init(number_of_clusters)
        Kmeans initialization
    
    MainRun(data, rows, cols, GeoExtent, FigureLabels, LabelLST, LabelLSTxls, Hmin, Hmax, HRmin, HRmax, Clustering_method, clustering_options)
        Main run module of SVR-mg.py
    
    Processing_constants()
        TIF import options (in function tiff_to_np in dim_myf)
              if PIL  then Image from PIL is used
              if SKITimage  then skimage.io is used
        CLUSTERING & CLASSIFICATION OPTIONS:
              K-means clustering
              K-means clustering refined by Naive Bayes Gaussian classification
    
    Reconstruct_matrix(evmat, LST)
        Inverse transform keep pc-1 only
    
    Reconstruct_matrix2(evmat, LST)
        Inverse transform keep pc2 & pc3 only
    
    centroids_visualize(data, figuretitle, Lx, MDLabel)
        Visualize centroids
    
    clusterRefineNBG(CM, centroid, iteration, centroid_variance, bb)
        Clustering refinements by NBG,
        display mean standardized divergence (n*n)-n, n=clusters
    
    clustering_Kmeans(data, LabelLST, maxC, maxNBG, f, FigureLabels, Clustering_method)
        Kmeans clustering
    
    clustering_Kmeans_by_NBG(data, ML2, maxC, maxNBG, f, MDLabel, Clustering_method)
        Kmeans clustering refined by NBG -density, display mean divergence
    
    compute_descriptive_stats(RLST, x, lst_or_rlst)
        compute mean, st.dev, kurtosis, skew
    
    covariance_matrix(LST2)
        Compoute variance-covariance matrix
    
    create_data_files(data)
        Read data file, create sub-matrices
    
    creatematrix(rows, cols, ids, labels)
        vector to image matrix
    
    crosscorrelate(LST)
        compute the crosscorrelation matrix
    
    data_imv_read(LfilesDIR, featuredimension, T)
        Main Data FILE (individual images read)
    
    descriptive_stats_RLST(data, LABELmonths3, Lx, f, lst_or_rlst)
        Compute, display & save to xlsx descriptive statistics for Rdata
    
    display_LST(rows, cols, xyrange, data, x, f, MDLabel)
        display data images and save to png/tiff files
    
    display_RLST(rows, cols, xyrange, data, RLST, x, f, MDLabel)
        display Rdata images and save to png/tif files
    
    display_save_clusterimage(rows, cols, xyrange, data, labels, f, w, MDLabe)
        covert vector cluster labels to image, plot it & save to tif
    
    display_save_maskimage(xyrange, c, MDLabel)
        convert vector cluster labels to image, plot,  save as csv, mat, tif
    
    dummyvar_fcheck()
        assign dummy variables if file donot exist (to exit from return var
    
    filenames_of_images(k)
        Defines the filenames of images  MASK, 01, 02, 03
    
    findcreatenewpath()
        Creates a new (non exisiting) path within the data/script-path where
        the output files are stored. The path name is ...\outX where X is
        a number determined automatically by this script
    
    findpaths_data2csv(data)
        find newpath to store outputs, change to newpath data dir
    
    historyfile()
        Track (save to file) the user inputs and the file outputs
    
    input_screen_int(xstring, xmin, xmax)
        input an integer X from screen in the range min<=X<=xmax
    
    input_screen_str_yn(xstring)
        input a string X from screen y, Y, n, N
    
    pcanew(LST)
        compute eigevalues, & eigenvectors
    
    plotmatrix(c, xyrange, lut, name1, yesno, MDLabel)
        plot a matrix
    
    printHST(RLST, Fstring, xmin, xmax, x, f, MDLabel)
        print histogram of LST/RLST
    
    printNPP(RLST, x, f, lst_or_rlst)
        print normal propability plot
    
    printRLST_correlation(data, x)
        write Rdata cross correlation matrix  to xls file
    
    prn_xls_centroids(workbook, Centroids, LabelLST)
        write Centroids matrix to a sheet of an excel workbook
    
    prn_xls_cluster_membership(workbook, CLlabels)
        compute & write cluster membership to excel file
    
    prn_xls_divergence(workbook, Diverg)
        write Divergence matrix to a sheet of an excel workbook
    
    prn_xls_sigma(workbook, sigma, LabelLST)
        write Sigma matrix to a sheet of an excel workbook
    
    prnxls_confuse(workbook, data2)
        Add confusion matrix to an xls sheet within a workbook
    
    program_constants()
        program constants:
        maxC = Maximum number of clusters
        maxNBG =  Maximum number of NBG refinements
    
    readdatafiles(filename, rows1, cols1, continue1, T)
        Read SVR 2-d tif file &  convert it 1-dto numpy array
    
    readdatafiles0(filename, continue1, T)
        Read image 2-d tif file &  convert it 1-d to numpy array
    
    readimagetiff(Ldatafiles, T)
        Read individual tiff images - convert data
    
    retranslatebymean(LST, RLST)
        RETranslate a matrix by mean vector (per columns)
    
    savematrix2image(c, name1)
        save image to tif file
    
    sortdescent(evs, evmat)
        sort eigenvalues-eigenvectors in descenting eigenvalue magnitude
    
    standardize_matrix2(A)
        standardize a 2-d matrix per columns
    
    tiff_to_np(filename, T)
        Read/Import tiff file
    
    translatebymean(LST)
        Translate a matrix by mean (per columns)
    
    write2classconvergece(a, iteration)
        Save mean inertia convergence to xlsx file
    
    xlspca(data, data1, data2, data3, x)
        write correlation matrix, eigen-vectors/values to xls file

FILE
    d:\run_z\dmr_myf.py
_____________________________________________________________________
44444444444444444444444444444444444444444444444444444444444444
**************************************************************
HISTORY FILE: Test RUN

 date: 2018-01-06 time = 1515222785.0923355
 _history.txt tracks user selections & output files

Dimensionality reduction-DEM Selective Variance Reduction by
                George Ch. Miliaresis (https://about.me/miliaresis)
                Details in https://github.com/miliaresis [Repository SVR.DEM]
                https://sites.google.com/site/miliaresisg/ 

      Output data files are stored to : D:\run_z\out10

 DISPLAY:descriptives, NPPs, images & histograms
 Compute, display descriptive statistics
    Write Rdata stats to descriptives_LST.xlsx
    Save absolute kurtosis & skew to abs_kurtosis_skew.png
   VISUALIZE & SAVE (png) the data images
      L1_ALOS
      L2_SRTM
      L3_ASTER
 Display & write NPP files
    NPP_H1.png
    NPP_H2.png
    NPP_H3.png
   DISPLAY & PRINT histograms for LST data
       H_LST1.png
       H_LST2.png
       H_LST3.png
SVR IMPLEMENTATION
    Compute cross correlation matrix
    Compute eigenvalues & eigenvectors
    Write xlsx file: pca.xlsx
  ---> Reconstruct from PC2 & PC3
 Compute, display descriptive statistics
    Write Rdata stats to descriptives_RLST.xlsx
    Save absolute kurtosis & skew to abs_kurtosis_skew.png
 Display & write NPP files
    NPP_RH1.png
    NPP_RH2.png
    NPP_RH3.png
 VISUALIZE & SAVE (png/tif) the Rdata images
    R1_ALOS
    R2_SRTM
    R3_ASTER
   DISPLAY & PRINT histograms for RLST data
       H_RLST1.png
       H_RLST2.png
       H_RLST3.png
    Save clustering outputs to _clustering_output_tables.xlsx
        Save centroids to centroids.png
        Save sigma to Sigma.png
   VISUALIZE cluster image & save to Clusters.png
        Save to Clustermap.tif, & Clustermap.mat
_____________________________________________________________________
555555555555555555555555555555555555555555555555555555555555555555555
*********************************************************************
Convergence

   1st: K-means clustering 

       Number of clusters in [2, 100]: 7

       Number of NBG refinements in [5, 500]: 300

   2nd:refine by NBG classification, MAX iterations:  300

   no     %              vectors       mean(st.divergence)
   1    3.8322          ( 98228 )           1.970045
   2    3.8680          ( 99144 )           2.344321
   3    3.7974          ( 97334 )           2.720994
   4    3.7136          ( 95187 )           3.082857
   5    3.6144          ( 92644 )           3.433549
   6    3.4902          ( 89462 )           3.784132
   7    3.3796          ( 86625 )           4.134461
   8    3.2780          ( 84022 )           4.484277
   9    3.1763          ( 81414 )           4.842610
  10    3.0579          ( 78381 )           5.226605
  11    2.9298          ( 75096 )           5.605404
  12    2.8112          ( 72057 )           5.975465
  13    2.6951          ( 69080 )           6.331822
  14    2.5565          ( 65528 )           6.671078
  15    2.4303          ( 62294 )           6.997241
  16    2.3125          ( 59274 )           7.307593
  17    2.2193          ( 56885 )           7.599233
  18    2.1265          ( 54507 )           7.872763
  19    2.0165          ( 51687 )           8.139425
  20    1.9320          ( 49522 )           8.389498
  21    1.8551          ( 47550 )           8.639150
  22    1.7667          ( 45283 )           8.878778
  23    1.6890          ( 43293 )           9.107852
  24    1.6113          ( 41301 )           9.322245
  25    1.5160          ( 38857 )           9.528048
  26    1.4489          ( 37138 )           9.727802
  27    1.3635          ( 34950 )           9.915437
  28    1.2941          ( 33171 )           10.094210
  29    1.2371          ( 31710 )           10.266284
  30    1.1701          ( 29991 )           10.435603
  31    1.1116          ( 28493 )           10.591728
  32    1.0603          ( 27177 )           10.741273
  33    1.0153          ( 26024 )           10.886203
  34    0.9784          ( 25078 )           11.025478
  35    0.9373          ( 24024 )           11.164367
  36    0.8796          ( 22547 )           11.298581
  37    0.8226          ( 21085 )           11.427965
  38    0.7723          ( 19796 )           11.543464
  39    0.7316          ( 18753 )           11.653255
  40    0.6978          ( 17887 )           11.753414
  41    0.6748          ( 17296 )           11.846644
  42    0.6343          ( 16258 )           11.937559
  43    0.6090          ( 15611 )           12.024399
  44    0.5760          ( 14764 )           12.109000
  45    0.5440          ( 13945 )           12.194221
  46    0.5118          ( 13119 )           12.276543
  47    0.4843          ( 12414 )           12.355780
  48    0.4641          ( 11895 )           12.426950
  49    0.4466          ( 11447 )           12.496063
  50    0.4244          ( 10877 )           12.563139
  51    0.4047          ( 10374 )           12.629435
  52    0.3830          (  9816 )           12.692104
  53    0.3771          (  9666 )           12.751669
  54    0.3498          (  8966 )           12.810042
  55    0.3307          (  8476 )           12.866677
  56    0.3261          (  8358 )           12.923041
  57    0.3098          (  7940 )           12.973538
  58    0.2991          (  7666 )           13.022035
  59    0.2936          (  7526 )           13.069765
  60    0.2837          (  7273 )           13.114295
  61    0.2828          (  7249 )           13.158304
  62    0.2703          (  6928 )           13.201694
  63    0.2678          (  6863 )           13.242992
  64    0.2637          (  6758 )           13.286976
  65    0.2616          (  6705 )           13.330512
  66    0.2522          (  6465 )           13.372618
  67    0.2460          (  6306 )           13.411799
  68    0.2408          (  6172 )           13.450974
  69    0.2271          (  5822 )           13.489082
  70    0.2215          (  5678 )           13.523622
  71    0.2206          (  5655 )           13.556506
  72    0.2077          (  5325 )           13.590721
  73    0.2119          (  5432 )           13.621196
  74    0.2060          (  5281 )           13.652963
  75    0.2029          (  5200 )           13.683631
  76    0.1998          (  5120 )           13.714323
  77    0.1926          (  4937 )           13.743423
  78    0.1950          (  4998 )           13.770019
  79    0.1875          (  4805 )           13.798033
  80    0.1859          (  4766 )           13.823070
  81    0.1857          (  4759 )           13.846213
  82    0.1836          (  4707 )           13.872561
  83    0.1839          (  4715 )           13.901870
  84    0.1777          (  4556 )           13.931639
  85    0.1811          (  4641 )           13.959283
  86    0.1752          (  4492 )           13.986151
  87    0.1742          (  4464 )           14.012049
  88    0.1763          (  4518 )           14.039788
  89    0.1710          (  4384 )           14.067708
  90    0.1747          (  4478 )           14.094331
  91    0.1696          (  4346 )           14.123367
  92    0.1647          (  4222 )           14.149519
  93    0.1714          (  4394 )           14.175403
  94    0.1698          (  4352 )           14.203116
  95    0.1648          (  4224 )           14.229827
  96    0.1642          (  4210 )           14.255418
  97    0.1612          (  4131 )           14.279488
  98    0.1577          (  4043 )           14.306159
  99    0.1524          (  3906 )           14.328890
 100    0.1574          (  4034 )           14.353011
 101    0.1472          (  3772 )           14.381336
 102    0.1472          (  3772 )           14.406240
 103    0.1443          (  3699 )           14.431170
 104    0.1419          (  3637 )           14.456814
 105    0.1458          (  3736 )           14.480170
 106    0.1461          (  3745 )           14.505843
 107    0.1387          (  3556 )           14.537208
 108    0.1404          (  3599 )           14.566828
 109    0.1356          (  3476 )           14.598140
 110    0.1408          (  3608 )           14.625006
 111    0.1307          (  3349 )           14.651316
 112    0.1301          (  3336 )           14.675957
 113    0.1321          (  3386 )           14.701783
 114    0.1306          (  3348 )           14.725024
 115    0.1292          (  3311 )           14.750317
 116    0.1269          (  3252 )           14.772545
 117    0.1234          (  3162 )           14.797587
 118    0.1267          (  3247 )           14.816332
 119    0.1262          (  3236 )           14.833959
 120    0.1261          (  3231 )           14.852833
 121    0.1285          (  3294 )           14.871717
 122    0.1297          (  3324 )           14.893318
 123    0.1314          (  3367 )           14.915886
 124    0.1302          (  3337 )           14.935499
 125    0.1328          (  3405 )           14.955018
 126    0.1255          (  3216 )           14.977937
 127    0.1273          (  3263 )           14.997817
 128    0.1143          (  2930 )           15.012885
 129    0.1145          (  2934 )           15.027802
 130    0.1151          (  2949 )           15.048034
 131    0.1092          (  2800 )           15.069110
 132    0.1039          (  2662 )           15.088591
 133    0.1001          (  2566 )           15.103214
 134    0.0945          (  2422 )           15.117571
 135    0.0959          (  2457 )           15.130576
 136    0.0959          (  2459 )           15.139713
 137    0.0981          (  2514 )           15.153871
 138    0.0937          (  2402 )           15.165603
 139    0.1023          (  2621 )           15.178544
 140    0.0996          (  2553 )           15.195005
 141    0.1038          (  2661 )           15.206446
 142    0.0998          (  2558 )           15.218920
 143    0.0978          (  2506 )           15.234213
 144    0.0979          (  2509 )           15.244497
 145    0.0996          (  2553 )           15.257131
 146    0.1012          (  2595 )           15.273167
 147    0.0963          (  2469 )           15.288724
 148    0.0983          (  2519 )           15.300674
 149    0.0979          (  2510 )           15.318656
 150    0.0941          (  2413 )           15.330871
 151    0.0999          (  2561 )           15.345144
 152    0.0958          (  2456 )           15.361047
 153    0.0946          (  2426 )           15.380945
 154    0.0933          (  2391 )           15.393009
 155    0.0948          (  2430 )           15.405712
 156    0.0886          (  2272 )           15.422163
 157    0.0881          (  2257 )           15.436250
 158    0.0882          (  2261 )           15.448760
 159    0.0835          (  2139 )           15.465442
 160    0.0780          (  1999 )           15.476118
 161    0.0800          (  2050 )           15.487984
 162    0.0755          (  1934 )           15.497851
 163    0.0729          (  1868 )           15.509905
 164    0.0749          (  1920 )           15.518320
 165    0.0689          (  1766 )           15.528145
 166    0.0749          (  1919 )           15.535023
 167    0.0618          (  1585 )           15.544282
 168    0.0692          (  1773 )           15.554198
 169    0.0661          (  1693 )           15.565681
 170    0.0666          (  1706 )           15.574715
 171    0.0640          (  1640 )           15.588891
 172    0.0628          (  1610 )           15.598602
 173    0.0628          (  1609 )           15.610842
 174    0.0613          (  1570 )           15.622923
 175    0.0608          (  1559 )           15.632100
 176    0.0540          (  1384 )           15.641688
 177    0.0615          (  1577 )           15.649015
 178    0.0584          (  1497 )           15.660235
 179    0.0524          (  1342 )           15.664813
 180    0.0555          (  1422 )           15.673304
 181    0.0513          (  1315 )           15.680562
 182    0.0517          (  1325 )           15.682169
 183    0.0535          (  1372 )           15.691580
 184    0.0497          (  1275 )           15.699567
 185    0.0491          (  1259 )           15.704506
 186    0.0478          (  1225 )           15.711535
 187    0.0464          (  1189 )           15.718195
 188    0.0542          (  1389 )           15.720039
 189    0.0537          (  1377 )           15.721503
 190    0.0506          (  1296 )           15.726994
 191    0.0543          (  1393 )           15.728065
 192    0.0495          (  1268 )           15.730046
 193    0.0455          (  1167 )           15.735765
 194    0.0492          (  1261 )           15.737827
 195    0.0418          (  1072 )           15.739133
 196    0.0471          (  1208 )           15.744028
 197    0.0471          (  1208 )           15.747054
 198    0.0455          (  1166 )           15.747289
 199    0.0490          (  1255 )           15.754310
 200    0.0459          (  1177 )           15.762384
 201    0.0437          (  1121 )           15.764128
 202    0.0479          (  1227 )           15.770675
 203    0.0431          (  1105 )           15.777470
 204    0.0431          (  1104 )           15.780740
 205    0.0432          (  1108 )           15.788257
 206    0.0426          (  1091 )           15.796996
 207    0.0361          (   926 )           15.800046
 208    0.0419          (  1074 )           15.800899
 209    0.0445          (  1140 )           15.805731
 210    0.0387          (   991 )           15.812625
 211    0.0446          (  1144 )           15.815506
 212    0.0426          (  1091 )           15.818214
 213    0.0390          (   999 )           15.826902
 214    0.0421          (  1078 )           15.831557
 215    0.0382          (   978 )           15.837976
 216    0.0418          (  1071 )           15.843068
 217    0.0349          (   895 )           15.851153
 218    0.0298          (   763 )           15.856223
 219    0.0312          (   799 )           15.859011
 220    0.0324          (   830 )           15.861681
 221    0.0408          (  1045 )           15.864957
 222    0.0334          (   857 )           15.871507
 223    0.0363          (   931 )           15.873839
 224    0.0335          (   859 )           15.881175
 225    0.0356          (   912 )           15.886148
 226    0.0332          (   850 )           15.894594
 227    0.0291          (   746 )           15.900502
 228    0.0301          (   771 )           15.905046
 229    0.0313          (   802 )           15.910283
 230    0.0297          (   762 )           15.915292
 231    0.0286          (   732 )           15.918836
 232    0.0299          (   766 )           15.922403
 233    0.0309          (   792 )           15.927755
 234    0.0299          (   767 )           15.936226
 235    0.0307          (   787 )           15.945598
 236    0.0291          (   747 )           15.953744
 237    0.0333          (   854 )           15.961416
 238    0.0330          (   845 )           15.974147
 239    0.0318          (   814 )           15.981704
 240    0.0335          (   858 )           15.987721
 241    0.0288          (   739 )           15.997911
 242    0.0254          (   652 )           16.007595
 243    0.0217          (   557 )           16.016525
 244    0.0276          (   707 )           16.023349
 245    0.0298          (   764 )           16.031961
 246    0.0256          (   657 )           16.041337
 247    0.0263          (   673 )           16.043987
 248    0.0267          (   684 )           16.046332
 249    0.0268          (   688 )           16.052024
 250    0.0289          (   742 )           16.056477
 251    0.0259          (   665 )           16.059819
 252    0.0252          (   647 )           16.061851
 253    0.0251          (   644 )           16.061987
 254    0.0228          (   585 )           16.061693
 255    0.0229          (   587 )           16.061162
 256    0.0268          (   687 )           16.066249
 257    0.0231          (   593 )           16.068953
 258    0.0244          (   625 )           16.070274
 259    0.0248          (   636 )           16.070099
 260    0.0216          (   554 )           16.072281
 261    0.0238          (   609 )           16.078714
 262    0.0246          (   630 )           16.085496
 263    0.0247          (   632 )           16.089612
 264    0.0229          (   588 )           16.090993
 265    0.0224          (   575 )           16.090011
 266    0.0215          (   551 )           16.090361
 267    0.0214          (   548 )           16.095471
 268    0.0182          (   466 )           16.101468
 269    0.0214          (   548 )           16.106102
 270    0.0208          (   532 )           16.108473
 271    0.0206          (   527 )           16.109966
 272    0.0220          (   564 )           16.108609
 273    0.0204          (   522 )           16.107681
 274    0.0163          (   417 )           16.111305
 275    0.0182          (   466 )           16.114304
 276    0.0188          (   483 )           16.118800
 277    0.0230          (   589 )           16.122662
 278    0.0197          (   504 )           16.124731
 279    0.0242          (   621 )           16.125532
 280    0.0186          (   476 )           16.126810
 281    0.0184          (   472 )           16.127973
 282    0.0178          (   456 )           16.128690
 283    0.0167          (   428 )           16.129534
 284    0.0213          (   547 )           16.132516
 285    0.0210          (   539 )           16.135663
 286    0.0229          (   588 )           16.137391
 287    0.0181          (   464 )           16.137173
 288    0.0158          (   404 )           16.138154
 289    0.0146          (   373 )           16.137111
 290    0.0142          (   363 )           16.139087
 291    0.0178          (   456 )           16.138476
 292    0.0179          (   458 )           16.138262
 293    0.0158          (   404 )           16.140455
 294    0.0183          (   470 )           16.142718
 295    0.0180          (   462 )           16.145703
 296    0.0194          (   497 )           16.151119
 297    0.0211          (   540 )           16.153308
 298    0.0183          (   470 )           16.154665
 299    0.0175          (   448 )           16.155528
 300    0.0134          (   344 )           16.155097

Save mean inertia convergence to file: convergence_NBG.xlsx
 NBG iterations:  300 output file: _clustering_output_tables.xlsx
   Centroids, Sigma, Divergence, Occurence, Confusion Matrix
     Confusion of KMEANS versus F I N A L  NBG
         Reclassified by NBG 83.1381 percent ( 2130996 ) 